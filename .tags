my_handler	/home/capstone/Documents/Repos/SIM/src/monopod/demos/demo_loops.cpp	/^void my_handler(int)$/;"	function	line:20	signature:(int)
main	/home/capstone/Documents/Repos/SIM/src/monopod/demos/demo_loops.cpp	/^int main(int, char**)$/;"	function	line:26	signature:(int, char**)
SCENARIO_MONOPOD_JOINT_H	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^#define SCENARIO_MONOPOD_JOINT_H$/;"	macro	line:3
monopod	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^namespace scenario::monopod {$/;"	namespace	line:13	class:scenario
final	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^class scenario::monopod::Joint final$/;"	class	line:18
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    bool valid() const override;$/;"	member	line:38	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    size_t dofs() const override;$/;"	member	line:45	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    std::string name(const bool scoped = false) const override;$/;"	member	line:53	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    core::JointType type() const override;$/;"	member	line:60	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    bool setControlMode(const core::JointControlMode mode) override;$/;"	member	line:68	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    core::JointControlMode controlMode() const override;$/;"	member	line:76	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    core::PID pid() const override;$/;"	member	line:87	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    bool setPID(const core::PID& pid) override;$/;"	member	line:95	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    std::vector<double> jointMaxGeneralizedForce() const override;$/;"	member	line:102	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    setJointMaxGeneralizedForce(const std::vector<double>& maxForce) override;$/;"	member	line:115	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    std::vector<double> jointPosition() const override;$/;"	member	line:122	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    std::vector<double> jointVelocity() const override;$/;"	member	line:129	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    std::vector<double> jointAcceleration() const override;$/;"	member	line:136	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    setJointGeneralizedForceTarget(const std::vector<double>& force) override;$/;"	member	line:149	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    std::vector<double> jointGeneralizedForceTarget() const override;$/;"	member	line:156	class:final
pImpl	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^    std::unique_ptr<Impl> pImpl;$/;"	member	line:160	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double controllerPeriod() const override;$/;"	member	line:166	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool historyOfAppliedJointForcesEnabled() const override;$/;"	member	line:167	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool enableHistoryOfAppliedJointForces(const bool enable = true, const size_t maxHistorySize = 100) override;$/;"	member	line:168	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   std::vector<double> historyOfAppliedJointForces() const override;$/;"	member	line:169	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double coulombFriction() const override;$/;"	member	line:170	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double viscousFriction() const override;$/;"	member	line:171	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   core::Limit positionLimit(const size_t dof = 0) const override;$/;"	member	line:175	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   core::Limit velocityLimit(const size_t dof = 0) const override;$/;"	member	line:176	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setVelocityLimit(const double maxVelocity, const size_t dof = 0) override;$/;"	member	line:177	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double maxGeneralizedForce(const size_t dof = 0) const override;$/;"	member	line:178	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setMaxGeneralizedForce(const double maxForce, const size_t dof = 0) override;$/;"	member	line:179	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double position(const size_t dof = 0) const override;$/;"	member	line:180	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double velocity(const size_t dof = 0) const override;$/;"	member	line:181	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double acceleration(const size_t dof = 0) const override;$/;"	member	line:182	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double generalizedForce(const size_t dof = 0) const override;$/;"	member	line:183	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setPositionTarget(const double position, const size_t dof = 0) override;$/;"	member	line:184	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setVelocityTarget(const double velocity, const size_t dof = 0) override;$/;"	member	line:185	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setAccelerationTarget(const double acceleration, const size_t dof = 0) override;$/;"	member	line:186	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setGeneralizedForceTarget(const double force, const size_t dof = 0) override;$/;"	member	line:187	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double positionTarget(const size_t dof = 0) const override;$/;"	member	line:188	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double velocityTarget(const size_t dof = 0) const override;$/;"	member	line:189	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double accelerationTarget(const size_t dof = 0) const override;$/;"	member	line:190	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   double generalizedForceTarget(const size_t dof = 0) const override;$/;"	member	line:191	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   core::JointLimit jointPositionLimit() const override;$/;"	member	line:195	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   core::JointLimit jointVelocityLimit() const override;$/;"	member	line:196	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setJointVelocityLimit(const std::vector<double>& maxVelocity) override;$/;"	member	line:197	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   std::vector<double> jointGeneralizedForce() const override;$/;"	member	line:198	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setJointPositionTarget(const std::vector<double>& position) override;$/;"	member	line:199	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setJointVelocityTarget(const std::vector<double>& velocity) override;$/;"	member	line:200	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   bool setJointAccelerationTarget(const std::vector<double>& acceleration) override;$/;"	member	line:201	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   std::vector<double> jointPositionTarget() const override;$/;"	member	line:202	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   std::vector<double> jointVelocityTarget() const override;$/;"	member	line:203	class:final
override	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^   std::vector<double> jointAccelerationTarget() const override;$/;"	member	line:204	class:final
controllerPeriod	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::controllerPeriod() const {exit(0);}$/;"	function	line:210	class:scenario::monopod::Joint	signature:() const
historyOfAppliedJointForcesEnabled	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::historyOfAppliedJointForcesEnabled() const {exit(0);}$/;"	function	line:211	class:scenario::monopod::Joint	signature:() const
enableHistoryOfAppliedJointForces	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::enableHistoryOfAppliedJointForces( const bool enable, const size_t maxHistorySize) {exit(0);}$/;"	function	line:212	class:scenario::monopod::Joint	signature:( const bool enable, const size_t maxHistorySize)
historyOfAppliedJointForces	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline std::vector<double> scenario::monopod::Joint::historyOfAppliedJointForces() const {exit(0);}$/;"	function	line:213	class:scenario::monopod::Joint	signature:() const
coulombFriction	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::coulombFriction() const {exit(0);}$/;"	function	line:214	class:scenario::monopod::Joint	signature:() const
viscousFriction	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::viscousFriction() const {exit(0);}$/;"	function	line:215	class:scenario::monopod::Joint	signature:() const
positionLimit	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline scenario::core::Limit scenario::monopod::Joint::positionLimit(const size_t dof) const {exit(0);}$/;"	function	line:219	class:scenario::monopod::Joint	signature:(const size_t dof) const
velocityLimit	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline scenario::core::Limit scenario::monopod::Joint::velocityLimit(const size_t dof) const {exit(0);}$/;"	function	line:220	class:scenario::monopod::Joint	signature:(const size_t dof) const
setVelocityLimit	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setVelocityLimit(const double maxVelocity, const size_t dof) {exit(0);}$/;"	function	line:221	class:scenario::monopod::Joint	signature:(const double maxVelocity, const size_t dof)
maxGeneralizedForce	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::maxGeneralizedForce(const size_t dof) const {exit(0);}$/;"	function	line:222	class:scenario::monopod::Joint	signature:(const size_t dof) const
setMaxGeneralizedForce	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setMaxGeneralizedForce(const double maxForce, const size_t dof) {exit(0);}$/;"	function	line:223	class:scenario::monopod::Joint	signature:(const double maxForce, const size_t dof)
position	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::position(const size_t dof) const {exit(0);}$/;"	function	line:224	class:scenario::monopod::Joint	signature:(const size_t dof) const
velocity	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::velocity(const size_t dof) const {exit(0);}$/;"	function	line:225	class:scenario::monopod::Joint	signature:(const size_t dof) const
acceleration	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::acceleration(const size_t dof) const {exit(0);}$/;"	function	line:226	class:scenario::monopod::Joint	signature:(const size_t dof) const
generalizedForce	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::generalizedForce(const size_t dof) const {exit(0);}$/;"	function	line:227	class:scenario::monopod::Joint	signature:(const size_t dof) const
setPositionTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setPositionTarget(const double position, const size_t dof) {exit(0);}$/;"	function	line:228	class:scenario::monopod::Joint	signature:(const double position, const size_t dof)
setVelocityTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setVelocityTarget(const double velocity, const size_t dof) {exit(0);}$/;"	function	line:229	class:scenario::monopod::Joint	signature:(const double velocity, const size_t dof)
setAccelerationTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setAccelerationTarget(const double acceleration, const size_t dof) {exit(0);}$/;"	function	line:230	class:scenario::monopod::Joint	signature:(const double acceleration, const size_t dof)
setGeneralizedForceTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setGeneralizedForceTarget(const double force, const size_t dof) {exit(0);}$/;"	function	line:231	class:scenario::monopod::Joint	signature:(const double force, const size_t dof)
positionTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::positionTarget(const size_t dof) const {exit(0);}$/;"	function	line:232	class:scenario::monopod::Joint	signature:(const size_t dof) const
velocityTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::velocityTarget(const size_t dof) const {exit(0);}$/;"	function	line:233	class:scenario::monopod::Joint	signature:(const size_t dof) const
accelerationTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::accelerationTarget(const size_t dof) const {exit(0);}$/;"	function	line:234	class:scenario::monopod::Joint	signature:(const size_t dof) const
generalizedForceTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline double scenario::monopod::Joint::generalizedForceTarget(const size_t dof) const {exit(0);}$/;"	function	line:235	class:scenario::monopod::Joint	signature:(const size_t dof) const
jointPositionLimit	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline scenario::core::JointLimit scenario::monopod::Joint::jointPositionLimit() const {exit(0);}$/;"	function	line:239	class:scenario::monopod::Joint	signature:() const
jointVelocityLimit	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline scenario::core::JointLimit scenario::monopod::Joint::jointVelocityLimit() const {exit(0);}$/;"	function	line:240	class:scenario::monopod::Joint	signature:() const
setJointVelocityLimit	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setJointVelocityLimit(const std::vector<double>& maxVelocity) {exit(0);}$/;"	function	line:241	class:scenario::monopod::Joint	signature:(const std::vector<double>& maxVelocity)
jointGeneralizedForce	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline std::vector<double> scenario::monopod::Joint::jointGeneralizedForce() const {exit(0);}$/;"	function	line:242	class:scenario::monopod::Joint	signature:() const
setJointVelocityTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setJointVelocityTarget(const std::vector<double>& velocity) {exit(0);}$/;"	function	line:243	class:scenario::monopod::Joint	signature:(const std::vector<double>& velocity)
setJointPositionTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setJointPositionTarget(const std::vector<double>& position) {exit(0);}$/;"	function	line:244	class:scenario::monopod::Joint	signature:(const std::vector<double>& position)
setJointAccelerationTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline bool scenario::monopod::Joint::setJointAccelerationTarget(const std::vector<double>& acceleration) {exit(0);}$/;"	function	line:245	class:scenario::monopod::Joint	signature:(const std::vector<double>& acceleration)
jointPositionTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline std::vector<double> scenario::monopod::Joint::jointPositionTarget() const {exit(0);}$/;"	function	line:246	class:scenario::monopod::Joint	signature:() const
jointVelocityTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline std::vector<double> scenario::monopod::Joint::jointVelocityTarget() const {exit(0);}$/;"	function	line:247	class:scenario::monopod::Joint	signature:() const
jointAccelerationTarget	/home/capstone/Documents/Repos/SIM/src/monopod/include/scenario/monopod/Joint.h	/^inline std::vector<double> scenario::monopod::Joint::jointAccelerationTarget() const {exit(0);}$/;"	function	line:248	class:scenario::monopod::Joint	signature:() const
DefaultPID	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^const scenario::core::PID DefaultPID;$/;"	variable	line:12
Impl	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^class Joint::Impl$/;"	class	line:14	class:Joint	file:
jointControlMode	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^    core::JointControlMode jointControlMode = core::JointControlMode::Idle;$/;"	member	line:18	class:Joint::Impl	file:
jointType	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^    core::JointType jointType = core::JointType::Revolute;$/;"	member	line:19	class:Joint::Impl	file:
forceTarget	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^    std::vector<double> forceTarget;$/;"	member	line:20	class:Joint::Impl	file:
jointMaxGeneralizedForce	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^    std::vector<double> jointMaxGeneralizedForce;$/;"	member	line:21	class:Joint::Impl	file:
parentModelName	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^    std::string parentModelName;$/;"	member	line:22	class:Joint::Impl	file:
name	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^    std::string name;$/;"	member	line:23	class:Joint::Impl	file:
monopodSdkIndex	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^    int monopodSdkIndex;$/;"	member	line:24	class:Joint::Impl	file:
Joint	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^Joint::Joint()$/;"	function	line:27	class:Joint	signature:()
id	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^uint64_t Joint::id() const$/;"	function	line:33	class:Joint	signature:() const
initialize	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^bool Joint::initialize(const std::pair<std::string, int> nameIndexPair,$/;"	function	line:43	class:Joint	signature:(const std::pair<std::string, int> nameIndexPair, const std::string parentModelName, const std::shared_ptr<monopod_drivers::Monopod> &monopod_sdk)
valid	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^bool Joint::valid() const$/;"	function	line:67	class:Joint	signature:() const
type	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^scenario::core::JointType Joint::type() const$/;"	function	line:74	class:Joint	signature:() const
dofs	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^size_t Joint::dofs() const$/;"	function	line:80	class:Joint	signature:() const
name	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^std::string Joint::name(const bool scoped) const$/;"	function	line:95	class:Joint	signature:(const bool scoped) const
setControlMode	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^bool Joint::setControlMode(const scenario::core::JointControlMode mode)$/;"	function	line:106	class:Joint	signature:(const scenario::core::JointControlMode mode)
controlMode	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^scenario::core::JointControlMode Joint::controlMode() const$/;"	function	line:120	class:Joint	signature:() const
pid	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^scenario::core::PID Joint::pid() const$/;"	function	line:126	class:Joint	signature:() const
setPID	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^bool Joint::setPID(const scenario::core::PID& pid)$/;"	function	line:132	class:Joint	signature:(const scenario::core::PID& pid)
jointPosition	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^std::vector<double> Joint::jointPosition() const$/;"	function	line:138	class:Joint	signature:() const
jointVelocity	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^std::vector<double> Joint::jointVelocity() const$/;"	function	line:153	class:Joint	signature:() const
jointAcceleration	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^std::vector<double> Joint::jointAcceleration() const$/;"	function	line:168	class:Joint	signature:() const
jointGeneralizedForceTarget	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^std::vector<double> Joint::jointGeneralizedForceTarget() const$/;"	function	line:183	class:Joint	signature:() const
setJointGeneralizedForceTarget	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^bool Joint::setJointGeneralizedForceTarget(const std::vector<double>& force)$/;"	function	line:188	class:Joint	signature:(const std::vector<double>& force)
jointMaxGeneralizedForce	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^std::vector<double> Joint::jointMaxGeneralizedForce() const$/;"	function	line:222	class:Joint	signature:() const
setJointMaxGeneralizedForce	/home/capstone/Documents/Repos/SIM/src/monopod/src/Joint.cpp	/^bool Joint::setJointMaxGeneralizedForce(const std::vector<double>& maxForce)$/;"	function	line:239	class:Joint	signature:(const std::vector<double>& maxForce)
Impl	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^class Model::Impl$/;"	class	line:17	class:Model	file:
jointIndexingMap	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^    std::unordered_map<JointName, int> jointIndexingMap;$/;"	member	line:23	class:Model::Impl	file:
jointNames	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^        std::optional<std::vector<std::string>> jointNames;$/;"	member	line:27	struct:Model::Impl::__anon1	file:
scopedJointNames	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^        std::optional<std::vector<std::string>> scopedJointNames;$/;"	member	line:28	struct:Model::Impl::__anon1	file:
buffers	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^    } buffers;$/;"	member	line:29	class:Model::Impl	typeref:struct:Model::Impl::__anon1	file:
monopod_sdk	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^    std::shared_ptr<monopod_drivers::Monopod> monopod_sdk;$/;"	member	line:42	class:Model::Impl	file:
Model	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^Model::Model()$/;"	function	line:45	class:Model	signature:()
id	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^uint64_t Model::id() const$/;"	function	line:67	class:Model	signature:() const
valid	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^bool Model::valid() const$/;"	function	line:76	class:Model	signature:() const
name	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^std::string Model::name() const$/;"	function	line:85	class:Model	signature:() const
dofs	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^size_t Model::dofs(const std::vector<std::string>& jointNames) const$/;"	function	line:91	class:Model	signature:(const std::vector<std::string>& jointNames) const
jointNames	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^std::vector<std::string> Model::jointNames(const bool scoped) const$/;"	function	line:105	class:Model	signature:(const bool scoped) const
getJoint	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^scenario::core::JointPtr Model::getJoint(const std::string& jointName) const$/;"	function	line:129	class:Model	signature:(const std::string& jointName) const
joints	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^Model::joints(const std::vector<std::string>& jointNames) const$/;"	function	line:144	class:Model	signature:(const std::vector<std::string>& jointNames) const
setJointControlMode	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^bool Model::setJointControlMode(const scenario::core::JointControlMode mode,$/;"	function	line:157	class:Model	signature:(const scenario::core::JointControlMode mode, const std::vector<std::string>& jointNames)
jointPositions	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^Model::jointPositions(const std::vector<std::string>& jointNames) const$/;"	function	line:173	class:Model	signature:(const std::vector<std::string>& jointNames) const
jointVelocities	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^Model::jointVelocities(const std::vector<std::string>& jointNames) const$/;"	function	line:183	class:Model	signature:(const std::vector<std::string>& jointNames) const
jointAccelerations	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^Model::jointAccelerations(const std::vector<std::string>& jointNames) const$/;"	function	line:193	class:Model	signature:(const std::vector<std::string>& jointNames) const
setJointGeneralizedForceTargets	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^bool Model::setJointGeneralizedForceTargets($/;"	function	line:202	class:Model	signature:( const std::vector<double>& forces, const std::vector<std::string>& jointNames)
jointGeneralizedForceTargets	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^std::vector<double> Model::jointGeneralizedForceTargets($/;"	function	line:213	class:Model	signature:( const std::vector<std::string>& jointNames) const
getJointDataSerialized	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^std::vector<double> Model::Impl::getJointDataSerialized($/;"	function	line:227	class:Model::Impl	signature:( const Model* model, const std::vector<std::string>& jointNames, std::function<std::vector<double>(core::JointPtr)> getJointData)
setJointDataSerialized	/home/capstone/Documents/Repos/SIM/src/monopod/src/Model.cpp	/^bool Model::Impl::setJointDataSerialized($/;"	function	line:249	class:Model::Impl	signature:( Model* model, const std::vector<double>& data, const std::vector<std::string>& jointNames, std::function<bool(core::JointPtr, const std::vector<double>)> setJointData)
main	/home/capstone/Documents/Repos/SIM/src/monopod/demos/demo_main.cpp	/^int main(int argc, char* argv[])$/;"	function	line:11	signature:(int argc, char* argv[])
